// Prisma Schema for Plaarket Marketplace
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum RFQStatus {
  OPEN
  QUOTED
  CLOSED
  EXPIRED
}

enum CertificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum NotificationType {
  RFQ_RECEIVED
  QUOTE_RECEIVED
  ORDER_STATUS
  CERTIFICATION_UPDATE
  GENERAL
}

// Core Models
model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  role      UserRole   @default(BUYER)
  status    UserStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Profile Relations
  buyerProfile  BuyerProfile?
  sellerProfile SellerProfile?

  // Activity Relations
  orders         Order[]
  rfqs           RFQ[]
  notifications  Notification[]
  certifications Certification[]
  cartItems      CartItem[]

  @@map("users")
}

model BuyerProfile {
  id          String  @id @default(uuid())
  userId      String  @unique
  firstName   String
  lastName    String
  company     String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  companyType String? // Individual, Small Business, Enterprise
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("buyer_profiles")
}

model SellerProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  companyName       String
  contactPerson     String
  phone             String
  address           String
  city              String
  state             String
  zipCode           String
  country           String
  description       String?
  website           String?
  establishedYear   Int?
  employeeCount     String?
  businessLicense   String?
  taxId             String?
  bankAccountInfo   Json?
  isVerified        Boolean  @default(false)
  verificationNotes String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  products     Product[]
  quotes       Quote[]
  categories   SellerCategory[]

  @@map("seller_profiles")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  parentId    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]
  sellers  SellerCategory[]

  @@map("categories")
}

model SellerCategory {
  id         String @id @default(uuid())
  sellerId   String
  categoryId String

  seller   SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([sellerId, categoryId])
  @@map("seller_categories")
}

model Product {
  id                String   @id @default(uuid())
  sellerId          String
  categoryId        String
  name              String
  description       String
  shortDescription  String?
  sku               String   @unique
  retailPrice       Decimal
  wholesalePrice    Decimal?
  minOrderQuantity  Int      @default(1)
  unit              String   // kg, lbs, pieces, etc.
  stockQuantity     Int      @default(0)
  isActive          Boolean  @default(true)
  images            String[] // Array of image URLs
  tags              String[]
  nutritionInfo     Json?
  storageInfo       String?
  shelfLife         String?
  origin            String?
  harvestDate       DateTime?
  isOrganic         Boolean  @default(true)
  isFairTrade       Boolean  @default(false)
  isGmoFree         Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  seller           SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category         Category      @relation(fields: [categoryId], references: [id])
  orderItems       OrderItem[]
  cartItems        CartItem[]
  certifications   ProductCertification[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id             String      @id @default(uuid())
  orderNumber    String      @unique
  buyerId        String
  status         OrderStatus @default(PENDING)
  subtotal       Decimal
  tax            Decimal     @default(0)
  shipping       Decimal     @default(0)
  total          Decimal
  shippingAddress Json
  billingAddress Json?
  paymentMethod  String?
  paymentStatus  String?     @default("pending")
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  buyer User        @relation(fields: [buyerId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id           String  @id @default(uuid())
  orderId      String
  productId    String
  quantity     Int
  unitPrice    Decimal
  totalPrice   Decimal
  isWholesale  Boolean @default(false)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model RFQ {
  id            String    @id @default(uuid())
  rfqNumber     String    @unique
  buyerId       String
  title         String
  description   String
  categoryId    String?
  quantity      Int
  unit          String
  budget        Decimal?
  location      String?
  deliveryDate  DateTime?
  status        RFQStatus @default(OPEN)
  expiresAt     DateTime
  requirements  Json?     // Additional requirements as JSON
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  buyer  User    @relation(fields: [buyerId], references: [id])
  quotes Quote[]

  @@map("rfqs")
}

model Quote {
  id          String   @id @default(uuid())
  rfqId       String
  sellerId    String
  price       Decimal
  quantity    Int
  unit        String
  deliveryTime String?
  terms       String?
  notes       String?
  isSelected  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rfq    RFQ           @relation(fields: [rfqId], references: [id], onDelete: Cascade)
  seller SellerProfile @relation(fields: [sellerId], references: [id])

  @@unique([rfqId, sellerId])
  @@map("quotes")
}

model Certification {
  id           String                @id @default(uuid())
  userId       String
  name         String
  description  String?
  issuer       String
  issueDate    DateTime
  expiryDate   DateTime?
  documentUrl  String
  status       CertificationStatus   @default(PENDING)
  verifiedBy   String?
  verifiedAt   DateTime?
  notes        String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  user     User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  products ProductCertification[]

  @@map("certifications")
}

model ProductCertification {
  id              String @id @default(uuid())
  productId       String
  certificationId String

  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  certification Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)

  @@unique([productId, certificationId])
  @@map("product_certifications")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?            // Additional data as JSON
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
